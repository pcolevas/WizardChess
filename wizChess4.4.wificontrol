#include <Arduino.h>
#include <AccelStepper.h>
#include <MultiStepper.h>
#include <WiFi.h>
#include <WebServer.h>

/*/////////////////////////////////////////////////////////////////////////////
                                      VARIABLES
/////////////////////////////////////////////////////////////////////////////*/
float l = 580;
float p = 30;
float n = 360;
float m = 360;
int speed = 700; 
float homeX = 1860;
float homeY = 1275;
float captXL = 50; 
float captXR = 3700; 


float xArray[8] = {l, l+(1.*n), l+(2.*n), l+(3.*n), l+(4.*n), l+(5.*n), l+(6.*n), l+(7.*n)};
float yArray[8] = {p, p+(1*n), p+(2*n), p+(3*n), p+(4*n), p+(5*n), p+(6*n), p+(7*n)};

// step size 
const int step_x = 375 ; 
const int step_y = 375 ; 

//State Variables 
bool splice = 1;
bool conv = 0; 
bool mov = 0; 
bool usearray = 0; 
bool start;

// define pins
const int stepPinA = 2;
const int dirPinA = 0;
const int stepPinB = 4;
const int dirPinB = 16;
const int limitSwitch_x = 17;
const int limitSwitch_y = 5;
const int emag = 18 ; 
const int led_G = 25; 
const int led_R = 32;
const int led_B = 33;

//message processing variables
String initLet;
String initNum;
String finLet;
String finNum;
String capt;
int transX1;
int transY1;
int transX2;
int transY2;
float initX;
float initY;
float finX;
float finY; 
bool captBool; 
int turnCounter = 1; 

//WIFI Setup
const char* ssid = "SDNet";
const char* password = "CapstoneProject";
String message = "";
WebServer server(80);



// instantiate stepper motor objects
AccelStepper A(AccelStepper::DRIVER, stepPinA, dirPinA);
AccelStepper B(AccelStepper::DRIVER, stepPinB, dirPinB);

/*///////////////////////////////////////////////////////////////////////
                                    FUNCTIONS 
///////////////////////////////////////////////////////////////////////*/ 

void handlePost() {
  if (server.method() == HTTP_POST) {
    message = server.arg("message");
    server.send(200);
  }
}

void green(bool state) { 

      digitalWrite(led_G,LOW);
      digitalWrite(led_R,LOW);
      digitalWrite(led_B,LOW);

  
    if(state){
      digitalWrite(led_G,HIGH);
    }
    else if(!state){
      digitalWrite(led_G,LOW);
    }
  
}

void white(bool state) { 
  
    if(state){
      digitalWrite(led_G,HIGH);
      digitalWrite(led_R,HIGH);
      digitalWrite(led_B,HIGH);
    }
    else if(!state){
      digitalWrite(led_G,LOW);
      digitalWrite(led_R,LOW);
      digitalWrite(led_B,LOW);
    }
  
}

void red(bool state) { 

      digitalWrite(led_G,LOW);
      digitalWrite(led_R,LOW);
      digitalWrite(led_B,LOW);
  
    if(state){
      digitalWrite(led_R,HIGH);
    }
    else if(!state){
      digitalWrite(led_R,LOW);
    }
  
}

void blue(bool state){

    digitalWrite(led_G,LOW);
    digitalWrite(led_R,LOW);
    digitalWrite(led_B,LOW);
  
    if(state){
      digitalWrite(led_B,HIGH);
    }
    else if(!state){
      digitalWrite(led_B,LOW);
    }
  
}

// Turn Magnet ON
void magnetOn(){
    digitalWrite(emag,HIGH); 
}

// Turn Magnet OFF
void magnetOff(){
  digitalWrite(emag,LOW) ; 
}

//Stops both motors immediately
void stopBoth(){
  A.stop();
  B.stop();
}

//USED ONLY FOR INITIALIZATION//
void negX(){
  A.setSpeed(-speed);
  B.setSpeed(-speed);
  A.runSpeed();
  B.runSpeed();
}

//USED ONLY FOR INITIALIZATION//
void negY(){
  
  A.setSpeed(-speed);
  B.setSpeed(speed);
  A.runSpeed();
  B.runSpeed();
}

//Sets the current position as zero for both A and B motors
void currentPositionZero(){
   A.setCurrentPosition(0.0);
   B.setCurrentPosition(0.0);
}

// moveDeltaX and moveDeltaY ONLY complete lateral and vertical movements along respective axes 
void moveDeltaX(float delta){

   A.moveTo(delta);
   B.moveTo(delta);
   A.setSpeed(speed);
   B.setSpeed(speed);

   while(A.distanceToGo()!=0 && B.distanceToGo()!=0){
      A.runSpeedToPosition();
      B.runSpeedToPosition();
      }

 
}

void moveDeltaY(float delta){

   A.moveTo(delta);
   B.moveTo(-1.0*(delta));
   A.setSpeed(speed);
   B.setSpeed(speed);

   while(A.distanceToGo()!=0 && B.distanceToGo()!=0){
      A.runSpeedToPosition();
      B.runSpeedToPosition();
      }

 
}

void diagCase1(float delta){

    A.moveTo(delta);
    A.setSpeed(speed);

    while(A.distanceToGo()!=0){
      A.runSpeedToPosition();
    }
}

void diagCase2(float delta){

    B.moveTo(-1.0*delta);
    B.setSpeed(speed);

    while(B.distanceToGo()!=0){
      B.runSpeedToPosition();
    }
}

void diagCase3(float delta){

    A.moveTo(-1.0*delta);
    A.setSpeed(speed);

    while(A.distanceToGo()!=0){
      A.runSpeedToPosition();
    }
}

void diagCase4(float delta){

    B.moveTo(delta);
    B.setSpeed(speed);

    while(B.distanceToGo()!=0){
      B.runSpeedToPosition();
    }
}

void initialize(){
  //uses the state variable 'start' to turn thes function on or off
  if(start){
   stopBoth();
   while(digitalRead(limitSwitch_y)){
      negY();
      }
   stopBoth();
   delay(100);
   while(digitalRead(limitSwitch_x)){
      negX();}
      stopBoth();
   currentPositionZero();
   start = 0;
   }  
}

void moveDiagonally(float deltx, float delty){

    float delta = sqrt( (sq(deltx)) + (sq(delty)) ) ; 

    if ( ((deltx) > 0) && ((delty > 0) ) ){

        diagCase1(delta*1.45);
        magnetOff();
      
    }
    else if( ((deltx) < 0) && ((delty > 0) ) ){

        diagCase2(delta*1.45);
        magnetOff();
    }
    else if( ((deltx) < 0) && ((delty < 0) ) ){

        diagCase3(delta*1.45);
        magnetOff(); 
    }
    else if( ((deltx) > 0) && ((delty < 0) ) ){

        diagCase4(delta*1.45);
        magnetOff();
    }

  
}

bool isEvenTurn(){

      if (turnCounter % 2)
    {
        return 1; 
    }
    else
    {
        return 0; 
    }
}

void move(float x1, float y1,float x2, float y2){


  float targetx = x2-x1;
  float targety = y2-y1; 

  currentPositionZero(); 
  moveDeltaY(targety);  
  currentPositionZero();
  moveDeltaX(targetx);
  currentPositionZero();
  //arives at point (x,y) 
  
}

void captChessMove(float x1, float y1, float x2, float y2){


      red(1);
      int distToJail; 

        if(isEvenTurn()){

          if(transY2!=7){

                //float captPosX = x2 + distToJail; 
                float captPosY = y2 + 190 ; 

                  move(homeX, homeY, x2, y2);
                  magnetOn();
                  delay(500);

                  move(x2,y2, captXR, y2+190);
                  delay(100);
                  magnetOff(); 

                  // move back to piece being moved      
                  move(captXR,captPosY, x1, y1);
                        

               }
              else if(transY2=7){

               //float captPosX = x2 + distToJail; 
                float captPosY = y2 - 190 ; 

                  move(homeX, homeY, x2, y2);
                  magnetOn();
                  delay(500);

                  move(x2,y2, captXR, y2-190);
                  delay(100);
                  magnetOff(); 

                  // move back to piece being moved      
                  move(captXR,captPosY, x1, y1);

              }}
        else if(!isEvenTurn()){

            
              if(transY2!=7){

                  //float captPosX = x2 + distToJail; 
                  float captPosY = y2 + 190 ; 

                  move(homeX, homeY, x2, y2);
                  magnetOn();
                  delay(500);

                  move(x2,y2, captXL, y2+190);
                  delay(100);
                  magnetOff(); 

                  // move back to piece being moved      
                  move(captXL,captPosY, x1, y1);
                

              }
          else if(transY2=7){

              //float captPosX = x2 + distToJail; 
                  float captPosY = y2 + 190 ; 

                  move(homeX, homeY, x2, y2);
                  magnetOn();
                  delay(500);

                  move(x2,y2, captXL, y2-190);
                  delay(100);
                  magnetOff(); 

                  // move back to piece being moved      
                  move(captXL,captPosY, x1, y1);

          }}


     
    
}
  
void chessMove(float x1, float y1, float x2, float y2){

    if(mov){

        float deltX = x2-x1 ;
        float deltY = y2-y1 ;
        float xhalfstep = deltX/2;
        float yhalfstep = deltY/2;
        
        if(captBool){
          captChessMove(x1,y1,x2,y2);}
        else if(!captBool){
          move(homeX, homeY, x1, y1);};

        green(1);
        magnetOn();
        delay(500);
        

        if(transX1 == transX2){

          moveDeltaY(deltY);
          delay(500);
          magnetOff();
          
          if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
          else{ move(x2,y2,homeX,homeY); }

        }
        else if(transY1 == transY2){

          moveDeltaX(deltX);
          delay(500);
          magnetOff();
          
          if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
          else{ move(x2,y2,homeX,homeY); }  

        }
        else if( abs(transX1-transX2) == abs(transY1-transY2) ){
          
            moveDiagonally(deltX,deltY);
            white(1);
            start=1; 
            initialize();   
            move(0,0,homeX,homeY); 


        }
        else if( ( (abs(transX1-transX2) == 1) && (abs(transY1-transY2) == 2) ) || ( (abs(transY1-transY2) == 1) && (abs(transX1-transX2) == 2) ) ){

              if( (transX2-transX1)==1 && (transY2-transY1)==2){
                  moveDeltaX(xhalfstep);
                  currentPositionZero();
                  moveDeltaY(deltY);
                  currentPositionZero();
                  moveDeltaX(xhalfstep+50);
                  delay(500);
                  magnetOff();
                  white(1);  
                  
                  if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
                  else{ move(x2+50,y2,homeX,homeY); }    
              }
              else if((transX2-transX1)==-1 && (transY2-transY1)==2){
                  moveDeltaX(xhalfstep);
                  currentPositionZero();
                  moveDeltaY(deltY);
                  currentPositionZero();
                  moveDeltaX(xhalfstep-50);
                  delay(500);
                  magnetOff();
                  white(1);  
                  
                  if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
                  else{ move(x2-50,y2,homeX,homeY); }    
              }
              else if((transX2-transX1)==1 && (transY2-transY1)==-2){
                  moveDeltaX(xhalfstep);
                  currentPositionZero();
                  moveDeltaY(deltY);
                  currentPositionZero();
                  moveDeltaX(xhalfstep+50);
                  delay(500);
                  magnetOff();
                  white(1);  
                  
                  if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
                  else{ move(x2+50,y2,homeX,homeY); }   
              }
              else if((transX2-transX1)==-1 && (transY2-transY1)==-2){
                  moveDeltaX(xhalfstep);
                  currentPositionZero();
                  moveDeltaY(deltY);
                  currentPositionZero();
                  moveDeltaX(xhalfstep-50);
                  delay(500);
                  magnetOff();
                  white(1);  
                  
                  if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
                  else{ move(x2-50,y2,homeX,homeY); }  
              }
              else if((transX2-transX1)==2 && (transY2-transY1)==1){
                  moveDeltaY(yhalfstep);
                  currentPositionZero();
                  moveDeltaX(deltX);
                  currentPositionZero();
                  moveDeltaY(yhalfstep+50);
                  delay(500);
                  magnetOff();
                  white(1);  
                  
                  if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
                  else{ move(x2,y2+50,homeX,homeY); }  
              }
              else if((transX2-transX1)==2 && (transY2-transY1)==-1){
                  moveDeltaY(yhalfstep);
                  currentPositionZero();
                  moveDeltaX(deltX);
                  currentPositionZero();
                  moveDeltaY(yhalfstep-50);
                  delay(500);
                  magnetOff();
                  white(1);  
                  
                  if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
                  else{ move(x2,y2-50,homeX,homeY); }
              }
              else if((transX2-transX1)==-2 && (transY2-transY1)==1){
                  moveDeltaY(yhalfstep);
                  currentPositionZero();
                  moveDeltaX(deltX);
                  currentPositionZero();
                  moveDeltaY(yhalfstep+50);
                  delay(500);
                  magnetOff();
                  white(1);  
                  if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
                  else{ move(x2,y2+50,homeX,homeY); }
              }
              else if((transX2-transX1)==-2 && (transY2-transY1)==-1){
                  moveDeltaY(yhalfstep);
                  currentPositionZero();
                  moveDeltaX(deltX);
                  currentPositionZero();
                  moveDeltaY(yhalfstep-50);
                  delay(500);
                  white(1);  
                  magnetOff();

                  if(turnCounter%4==0){
                    start=1;
                    initialize();   
                    move(0,0,homeX,homeY); 
                  }
                  else{ move(x2,y2-50,homeX,homeY); }
                  
                  
              }

        }
    white(1); 
    mov=0; 
    turnCounter=turnCounter+1; 

    }
}

void convert(){
  if(conv){

      // Use these chars to convert message to corrdinates
      String A = "A";
      String B = "B";
      String C = "C";
      String D = "D";
      String E = "E";
      String F = "F";
      String G = "G";
      String H = "H";

      String one = "1";
      String two = "2";
      String three = "3";
      String four = "4";
      String five = "5";
      String six = "6";
      String seven = "7";
      String eight = "8";
     
      

      if(initLet == A){
         transX1 = 0 ;
        
      }
      else if(initLet==B){
         transX1 = 1 ;
       
      }
      else if(initLet==C){
        transX1 = 2 ;
        
      }
      else if(initLet==D){
        transX1 = 3 ;
        
      }
      else if(initLet==E){
        transX1 = 4 ;
        
      }
      else if(initLet==F){
        transX1 = 5 ;
         
      }
      else if(initLet==G){
       transX1 = 6 ;
         
      }
      else if(initLet==H){
       transX1 = 7 ;
        
      }


      if(initNum==one){
        transY1 = 0 ; 
      }
      else if(initNum==two){
       transY1 = 1 ;
         
      }
      else if(initNum==three){
       transY1 = 2 ;
        
      }
      else if(initNum==four){
        transY1 = 3 ;
        
      }
      else if(initNum==five){
        transY1 = 4 ;
        
      }
      else if(initNum==six){
        transY1 = 5 ;
        
      }
      else if(initNum==seven){
        transY1 = 6 ;
        
      }
      else if(initNum==eight){
        transY1 = 7 ;
        
      }

      if(finLet==A){
        transX2 = 0 ; 
        
      }
      else if(finLet==B){
        transX2 = 1 ;
        
      }
      else if(finLet==C){
        transX2 = 2 ;
        
      }
      else if(finLet==D){
        transX2 = 3 ;
         
      }
      else if(finLet==E){
        transX2 = 4 ;
        
      }
      else if(finLet==F){
        transX2 = 5 ;
         
      }
      else if(finLet==G){
        transX2 = 6 ;
         
      }
      else if(finLet==H){
       transX2 = 7 ;
         
      }


      if(finNum==one){
        transY2 = 0 ; 
      }
      else if(finNum==two){
        transY2 = 1 ;
        
      }
      else if(finNum==three){
        transY2 = 2 ;
        
      }
      else if(finNum==four){
        transY2 = 3 ;
        
      }
      else if(finNum==five){
        transY2 = 4 ;
        
      }
      else if(finNum==six){
        transY2 = 5 ;
        
      }
      else if(finNum==seven){
        transY2 = 6 ;
        
      }
      else if(finNum==eight){
        transY2 = 7 ;
        
      }

       
    conv = 0; 
    mov = 1; 
    usearray=1;
  
  }
}

void spliceMessage(){

    
    if(splice){
        static unsigned int message_pos = 0;
        initLet = message[0];
        initNum = message[1];
        finLet = message[2] ;
        finNum = message[3]; 
        capt = message[4];

        splice = 0 ;
        conv = 1;
    }
}

void useArray(){

  if(usearray){

  initX = xArray[transX1];
  initY = yArray[transY1];
  finX = xArray[transX2];
  finY = yArray[transY2];
  
  }
  usearray = 0;
}

void convertCapt(String capt){

    if (capt=="0")
    {
      captBool = 0;
    }
    else if(capt=="1")
    {
      captBool = 1;
    }
    
}



/*/////////////////////////////////////////////////////////////////////////////
                                      SETUP
/////////////////////////////////////////////////////////////////////////////*/


void setup() {

  Serial.begin(115200);

  //WIFI Setup
    // Connect to Wi-Fi network with SSID and password
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
      Serial.println("Connecting to WiFi...");
    }

    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());

    server.on("/post", handlePost);
    server.begin();

  //Stepper Setup
  A.setMaxSpeed(5000.0);
  B.setMaxSpeed(5000.0);
  A.setCurrentPosition(0.);
  B.setCurrentPosition(0.); 
  A.setAcceleration(5000.);
  B.setAcceleration(5000.);

  //LED pins 
  pinMode(led_G, OUTPUT); 
  pinMode(led_B, OUTPUT); 
  pinMode(led_R, OUTPUT); 

  //Magnet Pin
  pinMode(emag, OUTPUT);
  

  //Limit Switches
  pinMode(limitSwitch_x, INPUT_PULLUP);
  pinMode(limitSwitch_y, INPUT_PULLUP);


  //Initialize Position  
  white(1);
  start = 1;
  initialize();
  move(0,0,homeX,homeY); 
}
  

/*/////////////////////////////////////////////////////////////////////////////
                                      LOOP 
/////////////////////////////////////////////////////////////////////////////*/

void loop() { 
  server.handleClient();
    if(!message.isEmpty()){
    splice = 1;
    spliceMessage() ;
    convert();
    useArray();
    convertCapt(capt);
    chessMove(initX,initY,finX,finY); }
  message="";   
}
