#include <Arduino.h>
#include <AccelStepper.h>
#include <MultiStepper.h>


/*/////////////////////////////////////////////////////////////////////////////
                                      VARIABLES
/////////////////////////////////////////////////////////////////////////////*/

float xArray[8] = {680, 1040, 1410, 1750, 2120, 2490, 2840, 3170};
float yArray[8] = {25, 383, 741, 1099, 1457, 1815, 2173, 2530};

// step size 
const int step_x = 375 ; 
const int step_y = 375 ; 

//State Variables
bool start = 1; 
bool splice = 0;
bool conv = 0; 
bool mov = 0; 
bool LEDstateG = LOW ;
bool LEDstateR = LOW; 
bool LEDstateB = LOW;  
bool usearray = 0; 

// define pins
const int stepPinA = 2;
const int dirPinA = 0;
const int stepPinB = 4;
const int dirPinB = 16;
const int limitSwitch_x = 17;
const int limitSwitch_y = 5;
const int emag = 18 ; 
//const int LED_Green = 13; 
//const int LED_red = 25 ; 
//const int LED_Blue = 34; 

//message processing variables
const unsigned int MAX_MESSAGE_LENGTH = 12;
static char message[MAX_MESSAGE_LENGTH];
char initLet;
char initNum;
char finLet;
char finNum;
int transX1;
int transY1;
int transX2;
int transY2;
float initX;
float initY;
float finX;
float finY; 


// instantiate stepper motor objects
AccelStepper A(AccelStepper::DRIVER, stepPinA, dirPinA);
AccelStepper B(AccelStepper::DRIVER, stepPinB, dirPinB);

/*///////////////////////////////////////////////////////////////////////
                                    FUNCTIONS 
///////////////////////////////////////////////////////////////////////*/
// Turn on LED 
/*void LED_G_on() { 
  
    LEDstateG = HIGH ; 
    digitalWrite(LED_Green, LEDstateG); 
  
}

void LED_G_off(){
  
    LEDstateG = LOW; 
    digitalWrite(LED_Green, LEDstateG); 
  
}

void LED_R_on() { 
  
    LEDstateR = HIGH ; 
    digitalWrite(LED_red, LEDstateR); 
  
}

void LED_R_off(){
  
    LEDstateR = LOW; 
    digitalWrite(LED_red, LEDstateR); 
  
}
*/

// Turn Magnet ON
void magnetOn(){
    digitalWrite(emag,HIGH); 
}

// Turn Magnet OFF
void magnetOff(){
  digitalWrite(emag,LOW) ; 
}

//Stops both motors immediately
void stopBoth(){
  A.stop();
  B.stop();
}

//USED ONLY FOR INITIALIZATION//
void negX(){
  A.setSpeed(-300);
  B.setSpeed(-300);
  A.runSpeed();
  B.runSpeed();
}

//USED ONLY FOR INITIALIZATION//
void negY(){
  
  A.setSpeed(-250);
  B.setSpeed(250);
  A.runSpeed();
  B.runSpeed();
}




//Sets the current position as zero for both A and B motors
void currentPositionZero(){
   A.setCurrentPosition(0.0);
   B.setCurrentPosition(0.0);
}

// moveDeltaX and moveDeltaY ONLY complete lateral and vertical movements along respective axes 
void moveDeltaX(float delta){

   A.moveTo(delta);
   B.moveTo(delta);
   A.setSpeed(300);
   B.setSpeed(300);

   while(A.distanceToGo()!=0 && B.distanceToGo()!=0){
      A.runSpeedToPosition();
      B.runSpeedToPosition();
      }

 
}

void moveDeltaY(float delta){

   A.moveTo(delta);
   B.moveTo(-1.0*delta);
   A.setSpeed(300);
   B.setSpeed(300);

   while(A.distanceToGo()!=0 && B.distanceToGo()!=0){
      A.runSpeedToPosition();
      B.runSpeedToPosition();
      }

 
}

void diagCase1(float delta){

    A.moveTo(delta);
    A.setSpeed(300);

    while(A.distanceToGo()!=0){
      A.runSpeedToPosition();
    }
}

void diagCase2(float delta){

    B.moveTo(-1.0*delta);
    B.setSpeed(300);

    while(B.distanceToGo()!=0){
      B.runSpeedToPosition();
    }
}

void diagCase3(float delta){

    A.moveTo(-1.0*delta);
    A.setSpeed(300);

    while(A.distanceToGo()!=0){
      A.runSpeedToPosition();
    }
}

void diagCase4(float delta){

    B.moveTo(delta);
    B.setSpeed(300);

    while(B.distanceToGo()!=0){
      B.runSpeedToPosition();
    }
}

void moveDiagonally(float deltx, float delty){

    float delta = sqrt( (sq(deltx)) + (sq(delty)) ) ; 

    if ( ((deltx) > 0) && ((delty > 0) ) ){

        diagCase1(delta*1.35);
      
    }
    else if( ((deltx) < 0) && ((delty > 0) ) ){

        diagCase2(delta*1.35);
      
    }
    else if( ((deltx) < 0) && ((delty < 0) ) ){

        diagCase3(delta*1.35);
      
    }
    else if( ((deltx) > 0) && ((delty < 0) ) ){

        diagCase4(delta*1.35);
      
    }
}

// Used to Home the cart at a bottom left hand corner of the board 

void initialize(){
  //uses the state variable 'start' to turn thes function on or off
  if(start){
  stopBoth();
   while(digitalRead(limitSwitch_y)){
      negY();
      }
   stopBoth();
   delay(100);
   while(digitalRead(limitSwitch_x)){
      negX();}
      stopBoth();
   currentPositionZero();
   start = 0;}  
}


void moveInitCo(float x, float y){

 if(mov){

  float targetx = x ;
  float targety = y ; 

  moveDeltaX(x); 
  currentPositionZero();
  moveDeltaY(y); 
  currentPositionZero();
  //arives at point (x,y) 
  
  
 
  mov = 0;
 }
}


//this is a first try at going from initialized to (x1,y1) and then to (x2, y2) 
void moveCo(float x1, float y1, float x2, float y2){

 if(mov){
 
    float deltaX = x2-x1;
    float deltaY = y2-y1;
     
    moveDeltaX(x1);
    currentPositionZero();
    moveDeltaY(y1);
    // arives at (x1,y1)
    magnetOn();
    delay(2000); 
     
    currentPositionZero();
    moveDeltaX(deltaX);
    currentPositionZero();
    moveDeltaY(deltaY);

    //arives at (x2, y2)
    delay(1000);  
    start = 1; 
    magnetOff();

    //go back the home point
    initialize(); 
    mov = 0;
 }
}


void chessMove(float x1, float y1, float x2, float y2){

    if(mov){

        float deltX = x2-x1 ;
        float deltY = y2-y1 ;
        float xhalfstep = deltX/2;
        float yhalfstep = deltY/2;

        moveInitCo(x1,y1);
        magnetOn();
        delay(500);
        

        if(transX1 == transX2){

          moveDeltaY(deltY);
          delay(500);
          magnetOff();

        }
        else if(transY1 == transY2){

          moveDeltaX(deltX);
          delay(500);
          magnetOff();

        }
        else if( abs(transX1-transX2) == abs(transY1-transY2) ){
          
            moveDiagonally(deltX,deltY);
        }
        else if( ( (abs(transX1-transX2) == 1) && (abs(transY1-transY2) == 2) ) || ( (abs(transY1-transY2) == 1) && (abs(transX1-transX2) == 2) ) ){

              if( (transX2-transX1)==1 && (transY2-transY1)==2){
                  moveDeltaX(xhalfstep);
                  currentPositionZero();
                  moveDeltaY(deltY);
                  currentPositionZero();
                  moveDeltaX(xhalfstep);
                  delay(500);
                  magnetOff();
              }
              else if((transX2-transX1)==-1 && (transY2-transY1)==2){
                  moveDeltaX(xhalfstep);
                  currentPositionZero();
                  moveDeltaY(deltY);
                  currentPositionZero();
                  moveDeltaX(xhalfstep);
                  delay(500);
                  magnetOff();
              }
              else if((transX2-transX1)==1 && (transY2-transY1)==-2){
                  moveDeltaX(xhalfstep);
                  currentPositionZero();
                  moveDeltaY(deltY);
                  currentPositionZero();
                  moveDeltaX(xhalfstep);
                  delay(500);
                  magnetOff();
              }
              else if((transX2-transX1)==-1 && (transY2-transY1)==-2){
                  moveDeltaX(xhalfstep);
                  currentPositionZero();
                  moveDeltaY(deltY);
                  currentPositionZero();
                  moveDeltaX(xhalfstep);
                  delay(500);
                  magnetOff();
              }
              else if((transX2-transX1)==2 && (transY2-transY1)==1){
                  moveDeltaY(yhalfstep);
                  currentPositionZero();
                  moveDeltaX(deltX);
                  currentPositionZero();
                  moveDeltaY(yhalfstep);
                  delay(500);
                  magnetOff();
              }
              else if((transX2-transX1)==2 && (transY2-transY1)==-1){
                  moveDeltaY(yhalfstep);
                  currentPositionZero();
                  moveDeltaX(deltX);
                  currentPositionZero();
                  moveDeltaY(yhalfstep);
                  delay(500);
                  magnetOff();
              }
              else if((transX2-transX1)==-2 && (transY2-transY1)==1){
                  moveDeltaY(yhalfstep);
                  currentPositionZero();
                  moveDeltaX(deltX);
                  currentPositionZero();
                  moveDeltaY(yhalfstep);
                  delay(500);
                  magnetOff();
              }
              else if((transX2-transX1)==-2 && (transY2-transY1)==-1){
                  moveDeltaY(yhalfstep);
                  currentPositionZero();
                  moveDeltaX(deltX);
                  currentPositionZero();
                  moveDeltaY(yhalfstep);
                  delay(500);
                  magnetOff();
              }

        }
    start = 1;
    initialize();
    mov=0; 
    }
}



void convert(){
  if(conv){

      // Use these chars to convert message to corrdinates
      char A = 'A';
      char B = 'B';
      char C = 'C';
      char D = 'D';
      char E = 'E';
      char F = 'F';
      char G = 'G';
      char H = 'H';

      char one = '1';
      char two = '2';
      char three = '3';
      char four = '4';
      char five = '5';
      char six = '6';
      char seven = '7';
      char eight = '8';
     
      

      if(initLet == A){
         transX1 = 0 ;
        
      }
      else if(initLet==B){
         transX1 = 1 ;
       
      }
      else if(initLet==C){
        transX1 = 2 ;
        
      }
      else if(initLet==D){
        transX1 = 3 ;
        
      }
      else if(initLet==E){
        transX1 = 4 ;
        
      }
      else if(initLet==F){
        transX1 = 5 ;
         
      }
      else if(initLet==G){
       transX1 = 6 ;
         
      }
      else if(initLet==H){
       transX1 = 7 ;
        
      }


      if(initNum==one){
        transY1 = 0 ; 
      }
      else if(initNum==two){
       transY1 = 1 ;
         
      }
      else if(initNum==three){
       transY1 = 2 ;
        
      }
      else if(initNum==four){
        transY1 = 3 ;
        
      }
      else if(initNum==five){
        transY1 = 4 ;
        
      }
      else if(initNum==six){
        transY1 = 5 ;
        
      }
      else if(initNum==seven){
        transY1 = 6 ;
        
      }
      else if(initNum==eight){
        transY1 = 7 ;
        
      }

      if(finLet==A){
        transX2 = 0 ; 
        
      }
      else if(finLet==B){
        transX2 = 1 ;
        
      }
      else if(finLet==C){
        transX2 = 2 ;
        
      }
      else if(finLet==D){
        transX2 = 3 ;
         
      }
      else if(finLet==E){
        transX2 = 4 ;
        
      }
      else if(finLet==F){
        transX2 = 5 ;
         
      }
      else if(finLet==G){
        transX2 = 6 ;
         
      }
      else if(finLet==H){
       transX2 = 7 ;
         
      }


      if(finNum==one){
        transY2 = 0 ; 
      }
      else if(finNum==two){
        transY2 = 1 ;
        
      }
      else if(finNum==three){
        transY2 = 2 ;
        
      }
      else if(finNum==four){
        transY2 = 3 ;
        
      }
      else if(finNum==five){
        transY2 = 4 ;
        
      }
      else if(finNum==six){
        transY2 = 5 ;
        
      }
      else if(finNum==seven){
        transY2 = 6 ;
        
      }
      else if(finNum==eight){
        transY2 = 7 ;
        
      }

       
    conv = 0; 
    mov = 1; 
    usearray=1;
  
  }
}


void spliceMessage(char mes[]){

    
    if(splice){
        static unsigned int message_pos = 0;
        initLet = mes[0];
        initNum = mes[1];
        finLet = mes[6] ;
        finNum = mes[7]; 

        splice = 0 ;
        conv = 1;
    }
}

void getMessage(char mes[]){

      while (Serial.available() > 0){
         
         static unsigned int message_pos = 0;
         char inByte = Serial.read();
      
         if ( inByte != '\n' && (message_pos < MAX_MESSAGE_LENGTH - 1) ){
           mes[message_pos] = inByte;
           message_pos++;}
         else{
           mes[message_pos] = '\0';
           message_pos = 0;
           splice = 1;}
       } 
}

void useArray(){

  if(usearray){

  initX = xArray[transX1];
  initY = yArray[transY1];
  finX = xArray[transX2];
  finY = yArray[transY2];
  
  }
  usearray = 0;
}

/*/////////////////////////////////////////////////////////////////////////////
                                      SETUP
/////////////////////////////////////////////////////////////////////////////*/


void setup() {
  Serial.begin(115200);

  //Stepper Setup
  A.setMaxSpeed(5000.0);
  B.setMaxSpeed(5000.0);
  A.setCurrentPosition(0.);
  B.setCurrentPosition(0.); 
  A.setAcceleration(5000.);
  B.setAcceleration(5000.);

  // LED pins 
 // pinMode(LED_Blue, OUTPUT); 
 //pinMode(LED_Green, OUTPUT); 
 //pinMode(LED_red, OUTPUT); 

  //Magnet Pin
  pinMode(emag, OUTPUT);
  

  //Limit Switches
  pinMode(limitSwitch_x, INPUT_PULLUP);
  pinMode(limitSwitch_y, INPUT_PULLUP);

  //Delay before beginnging
  

  //Initialize Position  
  initialize();

}
  

/*/////////////////////////////////////////////////////////////////////////////
                                      LOOP 
/////////////////////////////////////////////////////////////////////////////*/

void loop() { 

  //Get Coordinates//
  getMessage(message);
  spliceMessage(message) ;
  convert();
  useArray();
  //moveInitCo(initX,initY); 
  //moveCo(initX, initY, finX, finY) ;
  chessMove(initX,initY,finX,finY); 
   

}
